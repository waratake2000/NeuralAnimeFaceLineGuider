/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py:530: UserWarning: Using a target size (torch.Size([428, 120])) that is different to the input size (torch.Size([428, 18])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
202306281103_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f93cdf20490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 408, in main
    train_epoch_loss = fit(
  File "train.py", line 195, in fit
    loss = criterion(outputs, keypoints)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py", line 530, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py", line 3279, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/usr/local/lib/python3.8/dist-packages/torch/functional.py", line 73, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (18) must match the size of tensor b (120) at non-singleton dimension 1
/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py:530: UserWarning: Using a target size (torch.Size([285, 120])) that is different to the input size (torch.Size([285, 18])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
202306281103_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7fbd4c322490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 408, in main
    train_epoch_loss = fit(
  File "train.py", line 195, in fit
    loss = criterion(outputs, keypoints)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py", line 530, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py", line 3279, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/usr/local/lib/python3.8/dist-packages/torch/functional.py", line 73, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (18) must match the size of tensor b (120) at non-singleton dimension 1
/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py:530: UserWarning: Using a target size (torch.Size([214, 120])) that is different to the input size (torch.Size([214, 18])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
202306281103_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f61473ff490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 408, in main
    train_epoch_loss = fit(
  File "train.py", line 195, in fit
    loss = criterion(outputs, keypoints)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py", line 530, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py", line 3279, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/usr/local/lib/python3.8/dist-packages/torch/functional.py", line 73, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (18) must match the size of tensor b (120) at non-singleton dimension 1
/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py:530: UserWarning: Using a target size (torch.Size([171, 120])) that is different to the input size (torch.Size([171, 18])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
202306281103_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f7d39ceb490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 408, in main
    train_epoch_loss = fit(
  File "train.py", line 195, in fit
    loss = criterion(outputs, keypoints)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py", line 530, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py", line 3279, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/usr/local/lib/python3.8/dist-packages/torch/functional.py", line 73, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (18) must match the size of tensor b (120) at non-singleton dimension 1
/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py:530: UserWarning: Using a target size (torch.Size([142, 120])) that is different to the input size (torch.Size([142, 18])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
202306281103_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7fec0d3bc490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 408, in main
    train_epoch_loss = fit(
  File "train.py", line 195, in fit
    loss = criterion(outputs, keypoints)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py", line 530, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py", line 3279, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/usr/local/lib/python3.8/dist-packages/torch/functional.py", line 73, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (18) must match the size of tensor b (120) at non-singleton dimension 1
/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py:530: UserWarning: Using a target size (torch.Size([122, 120])) that is different to the input size (torch.Size([122, 18])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
202306281103_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f9c6c0cb490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 408, in main
    train_epoch_loss = fit(
  File "train.py", line 195, in fit
    loss = criterion(outputs, keypoints)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py", line 530, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py", line 3279, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/usr/local/lib/python3.8/dist-packages/torch/functional.py", line 73, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (18) must match the size of tensor b (120) at non-singleton dimension 1
/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py:530: UserWarning: Using a target size (torch.Size([107, 120])) that is different to the input size (torch.Size([107, 18])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
202306281103_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f1b9f588490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 408, in main
    train_epoch_loss = fit(
  File "train.py", line 195, in fit
    loss = criterion(outputs, keypoints)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/modules/loss.py", line 530, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py", line 3279, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/usr/local/lib/python3.8/dist-packages/torch/functional.py", line 73, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (18) must match the size of tensor b (120) at non-singleton dimension 1
202306281104_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f733c73d490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Train Loss: 10598.4428
Val Loss: 10747.8643
Epoch 2 of 20000
Epoch 3 of 20000
Epoch 4 of 20000
Epoch 5 of 20000
Epoch 6 of 20000
Epoch 7 of 20000
Epoch 8 of 20000
Epoch 9 of 20000
Epoch 10 of 20000
Epoch 11 of 20000
Epoch 12 of 20000
Epoch 13 of 20000
Epoch 14 of 20000
Epoch 15 of 20000
Epoch 16 of 20000
Epoch 17 of 20000
Epoch 18 of 20000
Epoch 19 of 20000
Epoch 20 of 20000
Epoch 21 of 20000
Epoch 22 of 20000
Epoch 23 of 20000
Epoch 24 of 20000
Epoch 25 of 20000
Epoch 26 of 20000
Epoch 27 of 20000
Epoch 28 of 20000
Epoch 29 of 20000
Epoch 30 of 20000
Epoch 31 of 20000
Epoch 32 of 20000
Epoch 33 of 20000
Epoch 34 of 20000
Epoch 35 of 20000
Epoch 36 of 20000
Epoch 37 of 20000
Epoch 38 of 20000
Epoch 39 of 20000
Epoch 40 of 20000
Epoch 41 of 20000
Epoch 42 of 20000
Epoch 43 of 20000
Epoch 44 of 20000
Epoch 45 of 20000
Epoch 46 of 20000
Epoch 47 of 20000
Epoch 48 of 20000
Epoch 49 of 20000
Epoch 50 of 20000
Train Loss: 274.8253
Val Loss: 342.0645
tensor([[ 38.7189,  77.3452,  40.8862,  92.0849,  43.5040, 106.4039,  47.6981,
         119.8261,  54.6453, 132.1597,  63.5778, 142.1902,  74.6262, 151.2544,
          86.3614, 158.8981,  99.8654, 162.7094, 113.6285, 159.7672, 124.8366,
         152.3749, 136.3129, 143.3096, 145.1477, 132.1174, 151.7545, 119.4938,
         156.2275, 105.5132, 158.5172,  90.7395, 159.4036,  76.3324, 128.6038,
          76.1101,  69.2904,  78.1213, 114.8303,  71.2733, 120.3383,  65.0357,
         129.3073,  63.5243, 138.4546,  65.0595, 145.1329,  70.2237, 144.6389,
          78.2317, 138.3564,  85.1172, 130.0956,  87.0463, 120.9403,  85.4578,
         115.2323,  79.3615,  51.6456,  72.5366,  57.7118,  67.1254,  66.6223,
          65.3672,  75.3478,  67.3062,  81.6120,  73.5378,  81.3933,  80.9859,
          76.2032,  87.4114,  67.4463,  88.8867,  58.7778,  86.4167,  52.6462,
          80.4317, 110.2484,  56.1971, 119.7560,  52.4533, 130.6180,  50.5606,
         141.0599,  49.9420, 150.2969,  51.8418,  44.5452,  54.1252,  53.3011,
          52.0917,  63.9085,  52.7497,  73.6301,  55.1981,  82.7325,  57.7242,
          96.5473, 104.8922,  84.3647, 128.1845,  90.4655, 125.6729, 100.0049,
         125.2410, 108.2827, 125.1836, 115.0414, 127.6034, 114.8534, 132.7545,
         108.7586, 135.2341, 100.2657, 136.3762,  91.6262, 135.6145,  84.7456,
         133.2547]], device='cuda:0')
tensor([[ 39.9064,  79.7018,  42.0927,  94.8807,  44.8348, 109.6211,  49.1342,
         123.4546,  56.3136, 136.1754,  65.5246, 146.4894,  76.8898, 155.8430,
          88.9971, 163.7102, 102.9179, 167.6837, 117.0773, 164.6266, 128.6117,
         156.9812, 140.4573, 147.6848, 149.5570, 136.1284, 156.3605, 123.0998,
         160.9557, 108.7112, 163.3153,  93.4800, 164.2922,  78.6486, 132.4742,
          78.4414,  71.4164,  80.5117, 118.3306,  73.4388, 123.9802,  67.0195,
         133.2168,  65.4561, 142.7026,  67.0506, 149.5217,  72.3900, 149.0193,
          80.5942, 142.5525,  87.7309, 134.0383,  89.6770, 124.5829,  88.0614,
         118.7458,  81.7742,  53.1963,  74.7297,  59.4633,  69.1722,  68.6279,
          67.3362,  77.6367,  69.3360,  84.0924,  75.7860,  83.8905,  83.4269,
          78.4729,  90.0517,  69.4804,  91.5937,  60.5573,  89.0683,  54.2188,
          82.8676, 113.5781,  57.9136, 123.3674,  54.0314, 134.5912,  52.0982,
         145.3551,  51.4355, 154.8660,  53.3935,  45.8866,  55.7636,  54.9310,
          53.6846,  65.8354,  54.3673,  75.8725,  56.8631,  85.2487,  59.4483,
          99.4842, 108.0439,  86.9603, 132.0840,  93.2215, 129.4945, 103.0616,
         129.0344, 111.5553, 128.9717, 118.5362, 131.4839, 118.3304, 136.7993,
         112.0726, 139.3361, 103.3234, 140.5047,  94.4543, 139.7266,  87.3264,
         137.2987]], device='cuda:0')
tensor([[ 38.9741,  77.8062,  41.0679,  92.6166,  43.7671, 107.0072,  47.9786,
         120.5214,  54.9793, 132.9537,  63.9666, 143.0133,  75.0779, 152.1550,
          86.9044, 159.8449, 100.4590, 163.7342, 114.3028, 160.7414, 125.5867,
         153.2550, 137.1332, 144.1964, 146.0081, 132.8943, 152.6473, 120.1862,
         157.1321, 106.1287, 159.4124,  91.2884, 160.3968,  76.8064, 129.3256,
          76.5824,  69.7419,  78.6294, 115.5257,  71.6997, 121.0244,  65.4353,
         130.0589,  63.9022, 139.3226,  65.4705, 145.9756,  70.6653, 145.4874,
          78.6877, 139.1978,  85.6585, 130.8872,  87.5552, 121.6172,  85.9912,
         115.9429,  79.8561,  51.9247,  72.9618,  58.0496,  67.5407,  66.9854,
          65.7459,  75.8197,  67.6563,  82.0957,  73.9622,  81.9268,  81.4331,
          76.5849,  87.9281,  67.8155,  89.4370,  59.1306,  86.9728,  52.9307,
          80.8808, 110.8848,  56.5250, 120.4446,  52.7646, 131.4151,  50.8834,
         141.9357,  50.2310, 151.1969,  52.1414,  44.7855,  54.4675,  53.6189,
          52.4024,  64.2610,  53.0957,  74.0745,  55.5052,  83.2549,  58.0266,
          97.1409, 105.4743,  84.9154, 128.9498,  91.0233, 126.4377, 100.6139,
         125.9486, 108.8989, 125.9053, 115.7098, 128.3794, 115.5439, 133.5363,
         109.4047, 136.0504, 100.8805, 137.1928,  92.2100, 136.4183,  85.2795,
         134.0431]], device='cuda:0')
tensor([[ 33.5713,  67.0242,  35.3666,  79.8379,  37.7089,  92.1619,  41.3399,
         103.8356,  47.4195, 114.5441,  55.1125, 123.1956,  64.6433, 131.0621,
          74.8678, 137.6717,  86.5408, 141.0694,  98.4907, 138.4686, 108.1673,
         131.9405, 118.1725, 124.2423, 125.8098, 114.4554, 131.5231, 103.4711,
         135.3471,  91.4105, 137.3108,  78.5953, 138.2051,  66.1781, 111.3065,
          65.9758,  60.0723,  67.7353,  99.5668,  61.8071, 104.2401,  56.3543,
         112.0113,  55.0249, 120.0694,  56.5025, 125.6962,  60.9394, 125.3334,
          67.7487, 119.9295,  73.8521, 112.7488,  75.3587, 104.7293,  74.0761,
          99.8617,  68.7953,  44.6992,  62.8332,  50.0213,  58.1670,  57.6935,
          56.6223,  65.3710,  58.2456,  70.7038,  63.7145,  70.6044,  70.1363,
          65.8953,  75.7312,  58.3814,  77.0210,  50.9210,  74.9595,  45.5484,
          69.6725,  95.5057,  48.7149, 103.7482,  45.4664, 113.2399,  43.8330,
         122.2304,  43.2134, 130.2397,  44.8848,  38.5468,  46.9206,  46.2244,
          45.1625,  55.4023,  45.7261,  63.8673,  47.7762,  71.6851,  49.9392,
          83.7017,  90.7971,  73.2042, 111.1129,  78.4478, 108.9534,  86.6877,
         108.4493,  93.7999, 108.4277,  99.6765, 110.6343,  99.5337, 115.0841,
          94.2899, 117.2136,  86.9283, 118.2045,  79.4988, 117.5079,  73.4729,
         115.4580]], device='cuda:0')
tensor([[ 38.9819,  77.8231,  41.0828,  92.6046,  43.7674, 107.0375,  47.9950,
         120.5272,  54.9503, 132.9716,  63.9480, 143.0552,  75.1021, 152.1889,
          86.9107, 159.8803, 100.4673, 163.7414, 114.3098, 160.7730, 125.6323,
         153.3269, 137.1298, 144.2112, 146.0132, 132.9185, 152.6699, 120.2601,
         157.2047, 106.1635, 159.4414,  91.3497, 160.3790,  76.8044, 129.3911,
          76.5789,  69.7543,  78.6449, 115.5350,  71.6875, 121.0532,  65.4319,
         130.1050,  63.9114, 139.3003,  65.4239, 146.0414,  70.6121, 145.5145,
          78.7147, 139.2111,  85.6256, 130.9113,  87.6006, 121.6644,  86.0094,
         115.9725,  79.8490,  51.9369,  72.9950,  58.0438,  67.5578,  67.0040,
          65.7661,  75.8012,  67.6880,  82.1195,  73.9724,  81.9194,  81.4517,
          76.6643,  87.9627,  67.8456,  89.4608,  59.1476,  86.9541,  52.9831,
          80.8947, 110.9170,  56.5150, 120.4815,  52.7648, 131.4296,  50.8832,
         141.9786,  50.2765, 151.2241,  52.1789,  44.8098,  54.4981,  53.5927,
          52.3944,  64.2501,  53.1114,  74.0406,  55.5350,  83.2881,  58.0697,
          97.1452, 105.5541,  84.8842, 128.9546,  91.0030, 126.4359, 100.6193,
         126.0079, 108.9461, 125.9576, 115.7399, 128.3755, 115.5695, 133.5104,
         109.3993, 136.0584, 100.8650, 137.2095,  92.1535, 136.4527,  85.2847,
         134.0765]], device='cuda:0')
tensor([[ 43.3160,  86.4914,  45.6466, 102.9428,  48.6541, 118.9396,  53.3149,
         133.9526,  61.1111, 147.7524,  71.1043, 158.9413,  83.4324, 169.1172,
          96.5850, 177.6248, 111.6684, 181.9668, 127.0355, 178.6354, 139.5660,
         170.3314, 152.4013, 160.2472, 162.2651, 147.7213, 169.6487, 133.5692,
         174.6422, 117.9537, 177.1930, 101.4437, 178.2892,  85.3301, 143.7348,
          85.1220,  77.5106,  87.3707, 128.4082,  79.6775, 134.5168,  72.7098,
         144.5386,  71.0331, 154.8593,  72.7727, 162.2292,  78.5412, 161.6891,
          87.4371, 154.6688,  95.1989, 145.4602,  97.3134, 135.1561,  95.5712,
         128.8622,  88.7398,  57.7125,  81.0996,  64.5037,  75.0846,  74.4620,
          73.0704,  84.2601,  75.2223,  91.2406,  82.2182,  91.0216,  90.5168,
          85.1215,  97.7099,  75.3826,  99.3883,  65.7076,  96.6497,  58.8343,
          89.8963, 123.2187,  62.8444, 133.8518,  58.6328, 146.0520,  56.5425,
         157.7368,  55.8036, 168.0266,  57.9408,  49.7803,  60.5245,  59.6172,
          58.2437,  71.4359,  59.0146,  82.3230,  61.6772,  92.5122,  64.4782,
         107.9524, 117.2237,  94.3552, 143.3274, 101.1675, 140.5258, 111.8280,
         139.9885, 121.0293, 139.9379, 128.6370, 142.6536, 128.4174, 148.4353,
         121.6219, 151.1958, 112.1258, 152.4624, 102.5124, 151.6177,  94.7656,
         148.9773]], device='cuda:0')
tensor([[ 42.7956,  85.4591,  45.1096, 101.7035,  48.0719, 117.5218,  52.6838,
         132.3530,  60.3741, 145.9916,  70.2553, 157.0545,  82.4470, 167.1039,
          95.4287, 175.5118, 110.3322, 179.7849, 125.5174, 176.5008, 137.9058,
         168.3133, 150.5809, 158.3235, 160.3233, 145.9620, 167.6212, 131.9931,
         172.5618, 116.5505, 175.0814, 100.2439, 176.1415,  84.3155, 142.0412,
          84.1012,  76.5873,  86.3304, 126.8634,  78.7229, 132.9162,  71.8424,
         142.8194,  70.1891, 152.9965,  71.8930, 160.3044,  77.5935, 159.7635,
          86.4020, 152.8223,  94.0510, 143.7201,  96.1649, 133.5550,  94.4299,
         127.3255,  87.6814,  57.0302,  80.1320,  63.7310,  74.1896,  73.5786,
          72.2024,  83.2523,  74.3294,  90.1550,  81.2310,  89.9270,  89.4406,
          84.1263,  96.5447,  74.4943,  98.2076,  64.9267,  95.4872,  58.1419,
          88.8275, 121.7590,  62.0892, 132.2685,  57.9390, 144.3019,  55.8689,
         155.8562,  55.1504, 166.0252,  57.2571,  49.1941,  59.8060,  58.9008,
          57.5434,  70.5813,  58.3082,  81.3344,  60.9494,  91.4128,  63.7225,
         106.6610, 115.8421,  93.2150, 141.6107,  99.9534, 138.8477, 110.4904,
         138.3247, 119.5880, 138.2736, 127.0996, 140.9493, 126.8878, 146.6521,
         120.1632, 149.3901, 110.7823, 150.6461, 101.2733, 149.8103,  93.6353,
         147.1988]], device='cuda:0')
tensor([[ 39.7698,  79.4151,  41.9068,  94.5347,  44.6790, 109.2009,  48.9564,
         122.9973,  56.1216, 135.6850,  65.2957, 145.9362,  76.6086, 155.2789,
          88.6913, 163.1100, 102.5377, 167.0872, 116.6503, 164.0247, 128.1340,
         156.3726, 139.9621, 147.1544, 149.0040, 135.6258, 155.7808, 122.6182,
         160.3318, 108.2958, 162.6982,  93.1314, 163.7109,  78.3710, 131.9576,
          78.1669,  71.1823,  80.2325, 117.8958,  73.1724, 123.5140,  66.7738,
         132.7015,  65.2078, 142.2076,  66.8386, 148.9502,  72.1532, 148.4652,
          80.2898, 142.0332,  87.4361, 133.5636,  89.3357, 124.0958,  87.7575,
         118.3246,  81.4921,  52.9798,  74.4554,  59.2419,  68.9273,  68.3604,
          67.0840,  77.3775,  69.0524,  83.7793,  75.4918,  83.5991,  83.1074,
          78.1355,  89.7101,  69.1991,  91.2555,  60.3469,  88.7652,  53.9968,
          82.5486, 113.1418,  57.6989, 122.9019,  53.8358, 134.1091,  51.9225,
         144.8361,  51.2171, 154.3005,  53.1991,  45.7008,  55.5734,  54.7378,
          53.4869,  65.5983,  54.1835,  75.6099,  56.6327,  84.9412,  59.1988,
          99.1328, 107.6166,  86.6652, 131.6004,  92.9025, 129.0384, 102.6881,
         128.5334, 111.1188, 128.4772, 118.0925, 131.0088, 117.9094, 136.3076,
         111.6789, 138.8345, 102.9629, 139.9957,  94.1498, 139.2199,  87.0173,
         136.7884]], device='cuda:0')
tensor([[ 36.3816,  72.6404,  38.3142,  86.4674,  40.8589,  99.8695,  44.7878,
         112.4922,  51.3372, 124.1121,  59.7142, 133.4904,  70.0623, 142.0204,
          81.1238, 149.1731,  93.7841, 152.8495, 106.6969, 150.0366, 117.2140,
         143.0139, 128.0127, 134.6162, 136.2848, 124.0394, 142.4920, 112.1615,
         146.6773,  99.0613, 148.7839,  85.1961, 149.7436,  71.6841, 120.6538,
          71.4869,  65.1087,  73.4041, 107.8699,  66.9349, 112.9531,  61.0629,
         121.3813,  59.6407, 130.0779,  61.1604, 136.2276,  65.9876, 135.7935,
          73.4271, 129.9277,  79.9833, 122.1717,  81.6957, 113.4912,  80.2835,
         108.2289,  74.5330,  48.4435,  68.0988,  54.1790,  63.0530,  62.5219,
          61.3594,  70.8014,  63.1315,  76.6232,  69.0428,  76.4814,  75.9973,
          71.4493,  82.0691,  63.2815,  83.4743,  55.1821,  81.1996,  49.3889,
          75.4894, 103.4874,  52.7736, 112.4155,  49.2476, 122.6842,  47.4965,
         132.4787,  46.8541, 141.1226,  48.6486,  41.7827,  50.8491,  50.0719,
          48.9183,  59.9924,  49.5686,  69.1592,  51.7811,  77.6969,  54.1324,
          90.6799,  98.4263,  79.2845, 120.3807,  84.9822, 118.0311,  93.9295,
         117.5373, 101.6449, 117.5125, 108.0155, 119.8419, 107.8514, 124.6610,
         102.1494, 126.9898,  94.1714, 128.0596,  86.1083, 127.3365,  79.6034,
         125.1115]], device='cuda:0')
tensor([[ 40.4267,  80.7237,  42.6086,  96.0435,  45.3944, 111.0110,  49.7651,
         124.9999,  56.9952, 137.9037,  66.3342, 148.3575,  77.8790, 157.8377,
          90.1369, 165.8020, 104.2126, 169.8244, 118.5539, 166.7348, 130.2775,
         159.0126, 142.2201, 149.5702, 151.4335, 137.8582, 158.3295, 124.7115,
         163.0355, 110.1053, 165.3633,  94.7194, 166.3613,  79.6418, 134.1850,
          79.4294,  72.3388,  81.5607, 119.8324,  74.3529, 125.5455,  67.8603,
         134.9263,  66.2948, 144.4920,  67.8639, 151.4510,  73.2532, 150.9135,
          81.6319, 144.3652,  88.8173, 135.7571,  90.8480, 126.1716,  89.2020,
         120.2743,  82.8072,  53.8729,  75.6991,  60.2023,  70.0735,  69.4939,
          68.2002,  78.6139,  70.2079,  85.1672,  76.7301,  84.9541,  84.4755,
          79.4979,  91.2148,  70.3671,  92.7777,  61.3314,  90.1909,  54.9394,
          83.9107, 115.0275,  58.6244, 124.9398,  54.7133, 136.3089,  52.7700,
         147.2414,  52.1351, 156.8271,  54.0910,  46.4749,  56.5022,  55.6046,
          54.3437,  66.6356,  55.0811,  76.7978,  57.5894,  86.3705,  60.2109,
         100.7473, 109.4601,  88.0461, 133.7456,  94.3873, 131.1316, 104.3623,
         130.6813, 112.9865, 130.6291, 120.0461, 133.1330, 119.8484, 138.4815,
         113.4756, 141.1066, 104.6164, 142.2893,  95.6091, 141.5088,  88.4484,
         139.0499]], device='cuda:0')
tensor([[ 28.7274,  57.4245,  30.3153,  68.3526,  32.2991,  78.9344,  35.4151,
          88.9072,  40.5775,  98.0958,  47.1861, 105.5195,  55.3651, 112.2546,
          64.1081, 117.9071,  74.1235, 120.7828,  84.3262, 118.5481,  92.6307,
         113.0109, 101.2028, 106.3856, 107.7096,  98.0236, 112.6244,  88.6567,
         115.9286,  78.3027, 117.5947,  67.3447, 118.3195,  56.6612,  95.3488,
          56.4710,  51.4459,  58.0081,  85.2529,  52.9117,  89.2917,  48.2470,
          95.9215,  47.1253, 102.7917,  48.3569, 107.6710,  52.1593, 107.3295,
          58.0577, 102.6863,  63.2044,  96.5447,  64.5609,  89.7199,  63.4605,
          85.5234,  58.8912,  38.2758,  53.8023,  42.8271,  49.8213,  49.4297,
          48.4952,  55.9632,  49.8990,  60.5538,  54.5556,  60.4557,  60.0548,
          56.4885,  64.8625,  50.0245,  65.9574,  43.6163,  64.1625,  39.0237,
          59.6961,  81.8086,  41.6962,  88.8620,  38.9281,  96.9676,  37.5429,
         104.6918,  37.0182, 111.5551,  38.4401,  33.0213,  40.1858,  39.5718,
          38.6658,  47.4345,  39.1525,  54.6823,  40.9129,  61.3792,  42.8009,
          71.6625,  77.8192,  62.6495,  95.1234,  67.1728,  93.2832,  74.2455,
          92.8890,  80.3557,  92.8659,  85.3678,  94.7263,  85.2436,  98.5260,
          80.7353, 100.3511,  74.4095, 101.2197,  68.0484, 100.6498,  62.8970,
          98.8752]], device='cuda:0')
tensor([[ 41.2571,  82.3602,  43.4712,  98.0253,  46.3275, 113.2738,  50.7802,
         127.5703,  58.1833, 140.7290,  67.7058, 151.3846,  79.4764, 161.0555,
          91.9793, 169.1891, 106.3401, 173.3033, 120.9861, 170.1459, 132.9359,
         162.2403, 145.1375, 152.6236, 154.5450, 140.6784, 161.5767, 127.2315,
         166.3370, 112.3432, 168.7494,  96.6352, 169.7732,  81.2829, 136.9096,
          81.0639,  73.8215,  83.2254, 122.2793,  75.8832, 128.1073,  69.2614,
         137.6752,  67.6444, 147.4668,  69.2837, 154.5239,  74.7831, 154.0001,
          83.2898, 147.3275,  90.6582, 138.5404,  92.6877, 128.7403,  91.0190,
         122.7340,  84.5216,  54.9680,  77.2400,  61.4393,  71.4956,  70.9107,
          69.5941,  80.2441,  71.6321,  86.9041,  78.2988,  86.6989,  86.2063,
          81.0879,  93.0718,  71.7932,  94.6744,  62.5881,  92.0488,  56.0421,
          85.6123, 117.3717,  59.8355, 127.4976,  55.8438, 139.0932,  53.8538,
         150.2419,  53.1769, 160.0344,  55.1969,  47.4151,  57.6573,  56.7502,
          55.4618,  68.0123,  56.2050,  78.3896,  58.7645,  88.1290,  61.4320,
         102.8156, 111.6591,  89.8672, 136.4973,  96.3347, 133.8242, 106.4951,
         133.3352, 115.2736, 133.2860, 122.4889, 135.8745, 122.3022, 141.3414,
         115.8043, 144.0033, 106.7761, 145.2088,  97.5900, 144.4005,  90.2634,
         141.8875]], device='cuda:0')
202306281104_CommonCnn
Training sample instances: 856
Validation sample instances: 17
{'image': tensor([[[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]],

        [[0.4078, 0.3765, 0.3373,  ..., 0.4118, 0.3882, 0.3608],
         [0.3804, 0.3686, 0.3569,  ..., 0.3843, 0.3882, 0.3882],
         [0.3373, 0.3608, 0.3882,  ..., 0.3451, 0.3922, 0.4314],
         ...,
         [1.0000, 1.0000, 1.0000,  ..., 0.9843, 0.9882, 0.9922],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9843, 0.9882],
         [1.0000, 1.0000, 1.0000,  ..., 0.9804, 0.9804, 0.9843]]]), 'keypoints': tensor([[ 44.6179,  82.7056],
        [ 46.5456,  91.4227],
        [ 47.7504, 104.8718],
        [ 52.0876, 116.8267],
        [ 58.5935, 127.2871],
        [ 67.2680, 135.2570],
        [ 77.3883, 141.4834],
        [ 87.7496, 147.2118],
        [100.2794, 150.2005],
        [112.3274, 147.9590],
        [123.6525, 141.7325],
        [133.0499, 133.7626],
        [141.4834, 125.5437],
        [148.4713, 115.0832],
        [153.0495, 103.6265],
        [156.6639,  91.4227],
        [157.1458,  77.9735],
        [129.4355,  77.9735],
        [ 68.4728,  81.9585],
        [121.7248,  76.9773],
        [126.0621,  72.2452],
        [131.6041,  70.5017],
        [138.1100,  70.9999],
        [142.9292,  73.9886],
        [143.4111,  79.2188],
        [138.8329,  83.2037],
        [132.5679,  83.7019],
        [126.3030,  83.4528],
        [120.2790,  81.9585],
        [ 56.9068,  78.9697],
        [ 61.7260,  74.9848],
        [ 67.9909,  73.4905],
        [ 74.7378,  73.7395],
        [ 78.8341,  77.4754],
        [ 78.8341,  83.2037],
        [ 74.4968,  86.6906],
        [ 68.4728,  88.6830],
        [ 62.2079,  88.4340],
        [ 58.1116,  83.9509],
        [106.7853,  77.2263],
        [114.9779,  68.0112],
        [124.6163,  62.5319],
        [135.4595,  59.2941],
        [146.0617,  60.5394],
        [ 48.7142,  68.0112],
        [ 59.0754,  62.7809],
        [ 69.9186,  64.7734],
        [ 79.5570,  71.2489],
        [ 88.2315,  72.7433],
        [106.3034, 103.1284],
        [ 87.2676, 129.7013],
        [ 95.2193, 125.7164],
        [103.4119, 122.4786],
        [111.8455, 123.7239],
        [118.1104, 127.9579],
        [118.1104, 128.7815],
        [111.8455, 124.5475],
        [103.4119, 123.3022],
        [ 95.2193, 126.5399],
        [ 87.2676, 130.5249]])}
train_tensor_dataの数 856
valid_tensor_dataの数 17
ModuleSpec(name='CommonCnn', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f8b69ca6490>, origin='/root/source/train_runner/./models/CommonCnn.py')
Epoch 1 of 20000
Train Loss: 10707.8838
Val Loss: 10752.5576
Epoch 2 of 20000
Epoch 3 of 20000
Epoch 4 of 20000
Epoch 5 of 20000
Epoch 6 of 20000
Epoch 7 of 20000
Epoch 8 of 20000
Epoch 9 of 20000
Epoch 10 of 20000
Epoch 11 of 20000
Epoch 12 of 20000
Epoch 13 of 20000
Epoch 14 of 20000
Epoch 15 of 20000
Epoch 16 of 20000
Epoch 17 of 20000
Epoch 18 of 20000
Epoch 19 of 20000
Epoch 20 of 20000
Epoch 21 of 20000
Epoch 22 of 20000
Epoch 23 of 20000
Epoch 24 of 20000
Epoch 25 of 20000
Epoch 26 of 20000
Epoch 27 of 20000
Epoch 28 of 20000
Epoch 29 of 20000
Epoch 30 of 20000
Epoch 31 of 20000
Epoch 32 of 20000
Epoch 33 of 20000
Epoch 34 of 20000
Epoch 35 of 20000
Epoch 36 of 20000
Epoch 37 of 20000
Epoch 38 of 20000
Epoch 39 of 20000
Epoch 40 of 20000
Epoch 41 of 20000
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 408, in main
    train_epoch_loss = fit(
  File "train.py", line 196, in fit
    train_running_loss += loss.item()
KeyboardInterrupt
202306281105_CommonCnn
Traceback (most recent call last):
  File "train.py", line 572, in <module>
    main()
  File "train.py", line 353, in main
    training_samples, valid_samples = train_test_split(
  File "train.py", line 53, in train_test_split
    df_data = pd.read_csv(csv_path, header=None)
  File "/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py", line 912, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py", line 583, in _read
    return parser.read(nrows)
  File "/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py", line 1704, in read
    ) = self._engine.read(  # type: ignore[attr-defined]
  File "/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/c_parser_wrapper.py", line 234, in read
    chunks = self._reader.read_low_memory(nrows)
  File "pandas/_libs/parsers.pyx", line 812, in pandas._libs.parsers.TextReader.read_low_memory
  File "pandas/_libs/parsers.pyx", line 889, in pandas._libs.parsers.TextReader._read_rows
  File "pandas/_libs/parsers.pyx", line 1034, in pandas._libs.parsers.TextReader._convert_column_data
  File "pandas/_libs/parsers.pyx", line 1088, in pandas._libs.parsers.TextReader._convert_tokens
  File "pandas/_libs/parsers.pyx", line 1163, in pandas._libs.parsers.TextReader._convert_with_dtype
  File "/usr/local/lib/python3.8/dist-packages/pandas/core/dtypes/common.py", line 1335, in is_extension_array_dtype
    def is_extension_array_dtype(arr_or_dtype) -> bool:
KeyboardInterrupt
